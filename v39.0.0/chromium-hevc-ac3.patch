diff --git a/build/config/unsafe_buffers_paths.txt b/build/config/unsafe_buffers_paths.txt
index 4433777ae40e0..52646153e72ea 100644
--- a/build/config/unsafe_buffers_paths.txt
+++ b/build/config/unsafe_buffers_paths.txt
@@ -32,3 +32,6 @@ $../../
 -ui/gl/  # Unsafe generated files.
 -url/third_party/
 -v8/
+-media/audio/
+-media/formats/
+-media/utils/
\ No newline at end of file
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index 24d1355fac575..8a7166de632bc 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -228,25 +228,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsDecoderHevcProfileSupported(const VideoType& type) {
-  if (!IsDecoderColorSpaceSupported(type.color_space)) {
-    return false;
-  }
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_DECODE_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS)
-  return GetSupplementalDecoderVideoProfileCache()->IsProfileSupported(
-      type.profile);
-#else
   return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_DECODE_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 }
 
 bool IsDecoderVp9ProfileSupported(const VideoType& type) {
@@ -579,7 +561,7 @@ bool IsEncoderOptionalVideoType(const media::VideoType& type) {
 
 bool IsDecoderBuiltInVideoCodec(VideoCodec codec) {
 #if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) && BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264) {
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC) {
     return true;
   }
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) &&
diff --git a/media/ffmpeg/ffmpeg_common.cc b/media/ffmpeg/ffmpeg_common.cc
index bcbb74fd56852..a0f31808225d7 100644
--- a/media/ffmpeg/ffmpeg_common.cc
+++ b/media/ffmpeg/ffmpeg_common.cc
@@ -64,7 +64,7 @@ VideoColorSpace GetGuessedColorSpace(const VideoColorSpace& color_space) {
 const char* GetAllowedVideoDecoders() {
   // This should match the configured lists in //third_party/ffmpeg.
 #if BUILDFLAG(USE_PROPRIETARY_CODECS) && BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
-  return "h264";
+  return "h264,hevc";
 #else
   return "";
 #endif
@@ -221,6 +221,10 @@ AVCodecID AudioCodecToCodecID(AudioCodec audio_codec,
   switch (audio_codec) {
     case AudioCodec::kAAC:
       return AV_CODEC_ID_AAC;
+    case AudioCodec::kAC3:
+      return AV_CODEC_ID_AC3;
+    case AudioCodec::kEAC3:
+      return AV_CODEC_ID_EAC3;
     case AudioCodec::kALAC:
       return AV_CODEC_ID_ALAC;
     case AudioCodec::kMP3:
@@ -1055,7 +1059,7 @@ int32_t HashCodecName(const char* codec_name) {
 
 const char* GetAllowedAudioDecoders() {
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
-#define EXTRA_CODECS ",aac"
+#define EXTRA_CODECS ",aac,ac3,eac3"
 #else
 #define EXTRA_CODECS
 #endif
diff --git a/media/ffmpeg/scripts/build_ffmpeg.py b/media/ffmpeg/scripts/build_ffmpeg.py
index 9ef6ba9afc2d3..dc24864feec40 100644
--- a/media/ffmpeg/scripts/build_ffmpeg.py
+++ b/media/ffmpeg/scripts/build_ffmpeg.py
@@ -1001,9 +1001,9 @@ def ConfigureAndBuild(target_arch, target_os, host_os, host_arch,
 
     # Google Chrome specific configuration.
     configure_flags['Chrome'].extend([
-        '--enable-decoder=aac,h264',
-        '--enable-demuxer=aac',
-        '--enable-parser=aac,h264',
+        '--enable-decoder=aac,h264,mp3,eac3,ac3,hevc,mpeg4,mpegvideo,mp2,mp1,flac',
+        '--enable-demuxer=aac,mp3,mov,dtshd,dts,avi,mpegvideo,m4v,h264,vc1,flac',
+        '--enable-parser=aac,h264,mpegaudio,mpeg4video,mpegvideo,ac3,h261,vc1,h263,flac',
     ])
 
     configure_flags['ChromeAndroid'].extend([
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index fef13f6b8ab58..fde72949969b4 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -71,6 +71,8 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
   // Only add more threads for those codecs that we know will benefit.
   switch (config.codec()) {
     case VideoCodec::kUnknown:
+	  // We do not compile ffmpeg with support for any of these codecs.
+      NOTREACHED();
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
     case VideoCodec::kHEVC:
@@ -80,9 +82,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kTheora:
     case VideoCodec::kMPEG4:
     case VideoCodec::kVP8:
-      // We do not compile ffmpeg with support for any of these codecs.
-      NOTREACHED();
-
     case VideoCodec::kH264:
       // Normalize to three threads for 1080p content, then scale linearly
       // with number of pixels.
@@ -117,8 +116,8 @@ static void ReleaseVideoBufferImpl(void* opaque, uint8_t* data) {
 
 // static
 bool FFmpegVideoDecoder::IsCodecSupported(VideoCodec codec) {
-  // We only build support for H.264.
-  return codec == VideoCodec::kH264 && IsDecoderBuiltInVideoCodec(codec);
+  // We only build support for H.264 / H.265.
+  return (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC) && IsDecoderBuiltInVideoCodec(codec);
 }
 
 FFmpegVideoDecoder::FFmpegVideoDecoder(MediaLog* media_log)
